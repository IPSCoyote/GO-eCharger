
version '{}' api version, the code below only supports version B
car '{}' 1=ready for charging, 2=charging, 3=waiting for car
amp '{}' ampere (current setting)
err '{}' error state, 1:RCCB, 3:PHASE, 8:NO_GROUND, 10:INTERNAL
ast '{}' access state, 0:OPEN, 1:RFID_REQ
alw '{}' allow charging, 0:false, 1:true
cbl '{}' cable capability in A, 0 for no cable
pha '{}' number of phases
tmp '{}' mainboard temperaturec
dws '{}' deka-watt-seconds, 1000 equals, 10.000 Ws charged in this charge proess
dwo '{}' turn off value for dws (for charge XY kWh function), if(dwo!=0 && dws/36000>=dwo)alw=0
adi '{}' adapter_in, 0:NO_ADAPTER, 1:16A_ADAPTER
uby '{}' unlocked by RFID card no
eto '{}' Energy total .1 kWh (value of 120 means 12 kWh charged)
wst '{}' wifi state, 3:connected, default:unconnected

Energy
nrg '{}' voltage L1 in V
nrg '{}' voltage L2 in V
nrg '{}' voltage L3 in V
nrg '{}' voltage on N, is !=0 when Schuko adapter is plugged in reversed
nrg '{}' current L1 in .1 A
nrg '{}' current L2 in .1 A
nrg '{}' current L3 in .1 A
nrg '{}' power L1 in .1 kW
nrg '{}' power L2 in .1 kW
nrg '{}' power L3 in .1 kW
nrg '{}' power on N

    #            if(Math.floor(pha/8) ==1 && parseInt(nrg[3])>parseInt(nrg[0])){
    #              nrg[0]=nrg[3]
    #              nrg[7]=nrg[10]
    #              nrg[11]=nrg[14]
    #            }

nrg '{}' power total in 100 kW
nrg '{}' powerfactor L1 in %
nrg '{}' powerfactor L2 in %
nrg '{}' powerfactor L1 in %
nrg '{}' powerfactor N

fwv '{}' firmware version (this code only supports below 020)
sse '{}' serial number (formatted as %06d string)
wss '{}' wlan extern SSID
wke '{}' wlan extern kennwort/password in cleartext
wen '{}' wlan extern enabled

tof '{}' time_offset for internal battery powered RTC
tds '{}' use daylight saving time for internal RTC
lbr '{}' led brightness, 0-255
aho '{}' awattar hours to charge
afi '{}' awattar hour:00 to be finished
ama '{}' absolute max ampere
al1 '{}' button ampere level 1
al2 '{}' button ampere level 2
al3 '{}' button ampere level 3
al4 '{}' button ampere level 4
al5 '{}' button ampere level 5
cid '{}' color idle, parseInt(HEX_CODE), 24bit
cch '{}' color charging, parseInt(HEX_CODE), 24bit
cfi '{}' color finished, parseInt(HEX_CODE), 24bit
ust '{}' unlock method, 0:standard, 1:auto_unlock, 2:always_locked
wak '{}' wlan hotspot kennwort/password
nmo '{}' norway mode, 0:false, 1:true

eca '{}' energy charged with card 1, in .1kWh
ecr '{}' energy charged with card 2, in .1kWh
ecd '{}' energy charged with card 3, in .1kWh
ec4 '{}' energy charged with card 4, in .1kWh
ec5 '{}' energy charged with card 5, in .1kWh
ec6 '{}' energy charged with card 6, in .1kWh
ec7 '{}' energy charged with card 7, in .1kWh
ec8 '{}' energy charged with card 8, in .1kWh
ec9 '{}' energy charged with card 9, in .1kWh
ec1 '{}' energy charged with card 10, in .1kWh

    # parameter names generated automatically, takes first character || first character after '_', 
    #    and next character that yields an unused paramter name
    # rfid_card_1 --> rca
    # rfid_card_2 --> rcr (because rca was already used and c was the next character that yields an unused paramter name
    # rfid_card_3 --> crd
    # rfid_card_4 --> rc4 ...
    
rca '{}' rfid card1 UID (only available for fwv<020)
rcr '{}'".format(jsondata['rcr']))
rcd '{}'".format(jsondata['rcd']))
rc4 '{}'".format(jsondata['rc4']))
rc5 '{}'".format(jsondata['rc5']))
rc6 '{}'".format(jsondata['rc6']))
rc7 '{}'".format(jsondata['rc7']))
rc8 '{}'".format(jsondata['rc8']))
rc9 '{}'".format(jsondata['rc9']))
rc1 '{}'".format(jsondata['rc1']))

rna '{}' rfid name1 (only available for fwv<020)
rnm '{}'".format(jsondata['rnm']))
rne '{}'".format(jsondata['rne']))
rn4 '{}'".format(jsondata['rn4']))
rn5 '{}'".format(jsondata['rn5']))
rn6 '{}'".format(jsondata['rn6']))
rn7 '{}'".format(jsondata['rn7']))
rn8 '{}'".format(jsondata['rn8']))
rn9 '{}'".format(jsondata['rn9']))
rn1 '{}'".format(jsondata['rn1']))
